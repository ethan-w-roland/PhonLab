[{"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\index.tsx":"1","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\App.tsx":"2","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Home.tsx":"3","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Flashcards.tsx":"4","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Phonology.tsx":"5","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Generic.tsx":"6","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\Carousel.tsx":"7","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\FlipCard.tsx":"8","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Quiz.tsx":"9","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\QuizBox.tsx":"10","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Vocab.tsx":"11","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\QuizCard.tsx":"12"},{"size":167,"mtime":1612049175505,"results":"13","hashOfConfig":"14"},{"size":752,"mtime":1612049478464,"results":"15","hashOfConfig":"14"},{"size":217,"mtime":1618929737487,"results":"16","hashOfConfig":"14"},{"size":1618,"mtime":1618950865954,"results":"17","hashOfConfig":"14"},{"size":4319,"mtime":1618950664014,"results":"18","hashOfConfig":"14"},{"size":970,"mtime":1618950831650,"results":"19","hashOfConfig":"14"},{"size":5260,"mtime":1617903857520,"results":"20","hashOfConfig":"14"},{"size":1959,"mtime":1617405612351,"results":"21","hashOfConfig":"14"},{"size":1470,"mtime":1618951188624,"results":"22","hashOfConfig":"14"},{"size":4197,"mtime":1618936082098,"results":"23","hashOfConfig":"14"},{"size":268,"mtime":1612048734818,"results":"24","hashOfConfig":"14"},{"size":2351,"mtime":1617419011375,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1gl8qam",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\index.tsx",[],["53","54"],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\App.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Home.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Flashcards.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Phonology.tsx",["55","56","57","58"],"import styled from 'styled-components';\r\nimport React, {useState, useEffect} from 'react';\r\nimport Generic from './Generic';\r\nimport {Tensor, InferenceSession} from \"onnxjs\";\r\n\r\n// Globals\r\nvar audioCtx;\r\nvar analyser;\r\nvar microphone;\r\nvar FSAMP;\r\n\r\n// implement linear interpolation to get 200 dim vect\r\nfunction downsize(arr, dim) {\r\n  var out = new Float32Array(dim);\r\n  for (var i=0; i < dim; i++) {\r\n      var ind = arr.length * (i / dim);\r\n      var bot = Math.floor(ind);\r\n      var top = Math.ceil(ind);\r\n      var dif = arr[top] - arr[bot];\r\n      var val = arr[bot] + dif*(ind-bot);\r\n      out[i] = val;\r\n  }\r\n  return out;\r\n}\r\n\r\n// return argmax of arr\r\nfunction arg_max(arr) {\r\n  var x = -1;\r\n  var top = -1;\r\n  for (var i = 0; i < arr.length; i++) {\r\n    if (arr[i] > top) {\r\n        top = arr[i];\r\n        x = i;\r\n    }\r\n  }\r\n  return x;\r\n}\r\n\r\n//initalize model and audio context\r\nconst session = new InferenceSession();\r\nvar was_init = false;\r\nasync function init() {\r\n  await session.loadModel(\"models/i_ih.onnx\");\r\n  console.log(\"model loaded\");\r\n  if (navigator.mediaDevices) {\r\n    console.log('getUserMedia supported.');\r\n    navigator.getUserMedia({audio: true}, function(stream){ //prompts user\r\n        audioCtx = new AudioContext();\r\n        microphone = audioCtx.createMediaStreamSource(stream);\r\n        analyser = audioCtx.createAnalyser();\r\n        analyser.fftSize = 2048*2;\r\n        microphone.connect(analyser);\r\n        FSAMP = audioCtx.sampleRate;\r\n        process();\r\n    }, function(){console.log('error')})};\r\n}\r\n\r\nvar pred_set = null;\r\nvar prob_set = null;\r\nfunction process(){\r\n  setInterval(async function(){\r\n\r\n  //get fft\r\n  var raw = new Uint8Array(analyser.frequencyBinCount);\r\n  analyser.getByteFrequencyData(raw);\r\n  var vol = Math.max(...raw)\r\n  if (vol < 200) {\r\n      pred_set('-');\r\n      prob_set([1,1]);\r\n  } else {\r\n\r\n    //nomalize fft data\r\n    var f_step = (FSAMP / 2.0) / raw.length;\r\n    var max_ind = Math.floor(5000.0/f_step);\r\n    var data = new Float32Array(raw.slice(0, max_ind));\r\n    var d_min = Math.min(...data);\r\n    for (var i=0; i<data.length; i++) {\r\n        data[i] = data[i] - d_min;\r\n    }\r\n    var d_max = Math.max(...data);\r\n    for (var i=0; i<data.length; i++) {\r\n        data[i] = data[i] / d_max;\r\n    }\r\n    //resample fft data\r\n    var vector = downsize(data, 300);\r\n\r\n    //input vector to model\r\n    var input = new Tensor(vector, \"float32\", [1, 300]);\r\n    var outputMap = await session.run([input]);\r\n    var outputTensor = outputMap.values().next().value;\r\n    var predictions = outputTensor.data;\r\n    var x = arg_max(predictions);\r\n    prob_set(predictions);\r\n    if (x==0) {\r\n        pred_set(\"ee\");\r\n    } else {\r\n        pred_set('ih');\r\n    }\r\n  }},200);\r\n}\r\n\r\nvar Graph = styled.div`\r\n  height: 400px;\r\n  width: 300px;\r\n  background-color:gray;\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px solid black;`\r\n\r\nvar Labels = styled.div`\r\n  width: 100%\r\n  height: 20px;\r\n  display:flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  background-color: lightgray;`\r\n\r\nvar Bars = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: flex-end;\r\n  justify-content: space-around;`\r\n\r\nvar Bar = styled.div`\r\n  width: 45%;\r\n  height: ${(props) => props.height}%;\r\n  background-color: #e38100;`\r\n\r\nconst Phonology = () => {\r\n  var [pred, set_pred] = useState(\"-\");\r\n  var [prob, set_prob] = useState([1,1]);\r\n  //initial loading\r\n  if (!was_init) {\r\n    pred_set = set_pred\r\n    prob_set = set_prob\r\n    init();\r\n    was_init = true;\r\n  }\r\n  var heights = [2,2];\r\n  if (pred != \"-\") {\r\n    heights = prob;\r\n    var base = 1.35\r\n    var sum = Math.pow(base, prob[0]) + Math.pow(base, prob[1])\r\n    heights[0] = 100 * Math.pow(base, prob[0]) / sum;\r\n    heights[1] = 100 * Math.pow(base, prob[1]) / sum;\r\n  }\r\n  return (\r\n    <Generic>\r\n      <br/>\r\n      <br/>\r\n      <br/>\r\n      <div>Test your pronunciation: <strong>ee vs. ih</strong></div>\r\n      <br/>\r\n      <Graph>\r\n        <Bars>\r\n          <Bar height={heights[0]}/>\r\n          <Bar height={heights[1]}/>\r\n        </Bars>\r\n        <Labels>\r\n          <div>ee</div>\r\n          <div>ih</div>\r\n        </Labels>\r\n      </Graph>\r\n    </Generic>\r\n  );\r\n}\r\n\r\nexport default Phonology;","C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Generic.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\Carousel.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\FlipCard.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Quiz.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\QuizBox.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\Vocab.tsx",[],"C:\\Users\\Roland\\Documents\\PhonLab\\react_site\\src\\pages\\components\\QuizCard.tsx",[],["59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":2,"column":26,"nodeType":"67","messageId":"68","endLine":2,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":81,"column":14,"nodeType":"67","messageId":"71","endLine":81,"endColumn":15},{"ruleId":"72","severity":1,"message":"73","line":94,"column":10,"nodeType":"74","messageId":"75","endLine":94,"endColumn":12},{"ruleId":"72","severity":1,"message":"76","line":143,"column":12,"nodeType":"74","messageId":"75","endLine":143,"endColumn":14},{"ruleId":"61","replacedBy":"77"},{"ruleId":"63","replacedBy":"78"},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["79"],["80"],"no-global-assign","no-unsafe-negation"]